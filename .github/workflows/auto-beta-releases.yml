name: Create Major Release on Label Addition

on:
  workflow_run:
    workflows: ["labeler"]  # The name of the first workflow (labeler)
    types:
      - completed

jobs:
  create-major-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up GitHub CLI
        uses: cli/cli-action@v2  # Set up the GitHub CLI

      - name: Check if label is 'major'
        id: check_label
        run: |
          LABELS=$(jq -r '.pull_request.labels | map(.name) | join(",")' $GITHUB_EVENT_PATH)
          if [[ "$LABELS" == *"major"* ]]; then
            echo "Label 'major' found"
            echo "IS_MAJOR=true" >> $GITHUB_ENV
          else
            echo "No 'major' label found, skipping release."
            exit 0
          fi

      - name: Get the latest tag and increment version
        if: env.IS_MAJOR == 'true'
        run: |
          # Get the latest tag (version) from the repository
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "Latest tag is $LATEST_TAG"

          # Extract version parts
          MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | sed 's/v//')
          MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          PATCH=$(echo $LATEST_TAG | cut -d. -f3)

          # Increment the major version for a major release
          NEW_MAJOR=$((MAJOR + 1))
          NEW_VERSION="v$NEW_MAJOR.$MINOR.$PATCH-beta"

          echo "New version will be: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Create and Push New Tag for Release
        if: env.IS_MAJOR == 'true'
        run: |
          # Create the tag using GitHub CLI
          gh auth login --with-token < $GITHUB_TOKEN
          gh release create $NEW_VERSION --target main --notes "Release for major update, beta version." --prerelease --title "$NEW_VERSION" --generate-notes

      - name: Push Tag to GitHub
        if: env.IS_MAJOR == 'true'
        run: |
          git tag $NEW_VERSION
          git push origin $NEW_VERSION
